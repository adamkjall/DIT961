

public class Lab1 {
    /** Sorting algorithms **/

    // Insertion sort.

    public static void insertionSort(int[] array) {
    	for(int i=1; i < array.length; i++){
    		int nextVal = array[i];
    		int currentVal = i-1;
    		
    		while(currentVal >= 0 && array[currentVal] > nextVal) {
    			array[currentVal + 1] = array[currentVal];
    			currentVal = currentVal - 1; 
    		}
    		array[currentVal + 1] = nextVal;
    		
        //throw new UnsupportedOperationException();
    	}
    }

    // Quicksort.

    public static void quickSort(int[] array) {
        
    	quickSort(array, 0, array.length - 1);
    	
    }

    // Quicksort part of an array
    private static void quickSort(int[] array, int begin, int end) {
    	if (begin < end){
    		int pi = partition(array, begin, end);
    		
    		quickSort(array, begin, pi-1);
    		quickSort(array, pi+1, end);
    	}
    	
   }

    // Partition part of an array, and return the index where the pivot
    // ended up.
    private static int partition(int[] array, int begin, int end) {
    	int pivot = array[end];
    	int i = begin - 1;
    	for (int j = begin; j <= end; j++){
    		
    		if(array[j] <= pivot){
    			i++;
    			swap(array, array[i], array[j]);
    			
    		}
    		
    	}
    	
    	swap(array, array[i+1], array[end]);
    	return i+1;
   
    }

    // Swap two elements in an array
    private static void swap(int[] array, int i, int j) {
        int x = array[i];
        array[i] = array[j];
        array[j] = x;
    }

    // Mergesort.

    public static int[] mergeSort(int[] array) {
        throw new UnsupportedOperationException();
    }

    // Mergesort part of an array
    private static int[] mergeSort(int[] array, int begin, int end) {
        throw new UnsupportedOperationException();
    }

    // Merge two sorted arrays into one
    private static int[] merge(int[] left, int[] right) {
        throw new UnsupportedOperationException();
    }
}
